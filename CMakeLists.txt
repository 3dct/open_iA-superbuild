cmake_minimum_required(VERSION 3.14)
# Required CMake version: as high as open_iA!
if (CMAKE_MAJOR_VERSION GREATER 3 OR (CMAKE_MAJOR_VERSION EQUAL 3 AND CMAKE_MINOR_VERSION GREATER 15))
	# prevent all submodules to be fetched in ExternalProject_Add if GIT_SUBMODULES is ""
	CMAKE_POLICY(SET CMP0097 NEW)
endif()
project(open_iA_superbuild LANGUAGES CXX)

include(ExternalProject)

option (VTK_USE_GIT_REPO "Whether to use git repository for VTK library. If disabled (default), the release archives will be used instead. Note that enabling this option might increase build times significantly." OFF)
option (ITK_USE_GIT_REPO "Whether to use git repository for VTK library. If disabled (default), the release archives will be used instead. Note that enabling this option might increase build times significantly." OFF)

option (ENABLE_ALL "Enables all optional modules and filters (see also separate ENABLE_xyz options; all except for ENABLE_PRECOMPILE are enabled if this is set to on. Note that unchecking this box again does NOT have any direct effect; it will not automatically set these options to unchecked or their state before. But you will have to uncheck the option if you want to disable any of the single ENABLE_xyz options affected by this setting, otherwise they will be re-enabled on next 'Configure' run) (default: disabled)" OFF)
option (ENABLE_OPENCL "Enables OpenCL; the DreamCaster tool depends is only enabled if this setting is enabled; enabling this option also enables some GPU-optimized ITK filters (default: disabled)" OFF)
option (ENABLE_FILTERS "Whether to build image processing filters (smoothing, segmentation, intensity transformations, geometric transformations, ...) (default: enabled)" ON)
option (ENABLE_TOOLS "Whether to build common tool modules, e.g. FeatureScout, 4DCT, GEMSe, Dynamic Volume Lines, FIAKER, ... (default: enabled)" ON)
option (ENABLE_TEST "Whether to enable build of tests runners and the capability to submit CDash test runs (default: disabled)" OFF)
option (ENABLE_ASTRA "Whether to build ASTRA reconstruction library and open_iA ASTRA module. This will also fetch and build boost, so enabling it will considerably increase the build time! (default: disabled)" OFF)
option (ENABLE_VR "Enable VR module; requires OpenVR SDK, which will be fetched automatically (default: disabled)" OFF)
option (ENABLE_AI "Enable AI module; requires onnx runtime, which will be fetched automatically; on Windows, you can change whether CUDA or DirectML backend is chosen with the option AI_ONNX_USE_CUDA (default: disabled)" OFF)
option (ENABLE_EIGEN "Whether to fetch and use eigen (default: disabled)" OFF)
option (ENABLE_HDF5 "Whether to fetch and build HDF5 library and use it in open_iA (default: disabled)" OFF)
option (ENABLE_PRECOMPILE "Whether to build open_iA with precompiled headers enabled (default: disabled; NOT included in \"ENABLE_ALL\")" OFF)

option (BUILD_VTK "Build VTK in the superbuild. If disabled, you need to set VTK_DIR to an existing VTK build (default: enabled)" ON)
option (BUILD_ITK "Build ITK in the superbuild. If disabled, you need to set ITK_DIR to an existing ITK build (default: enabled)" ON)
if (WIN32)
	set (BUILD_BOOST_DEFAULT_VAL ON)
else()
	set (BUILD_BOOST_DEFAULT_VAL OFF)
endif()
option (BUILD_BOOST "Fetch and build Boost in the superbuild, if astra is enabled. If disabled, you need to set BOOST_DIR to an existing boost build (default: enabled)" ${BUILD_BOOST_DEFAULT_VAL})
#option (FETCH_OPENVR "Fetch release of OpenVR SDK. If disabled, you need to set OPENVR_DIR to an existing OpenVR SDK directory" ON)
#option (FETCH_EIGEN "Fetch release of eigen. If disabled, you need to set EIGEN3_DIR to an existing Eigen 3.x directory" ON)
#option (BUILD_HDF5 "Fetch and build HDF5. If disabled, you need to set HDF5_DIR to an existing HDF5 build" ON)
#option (FETCH_ONNX "Fetch required ONNX runtime. If disabled, you need to set ONNX_RUNTIME_DIR to an existing ONNX runtime directory" ON) # could be a bit complicated to implement, since we would have to check the type of runtime (CUDA/DirectML/CPU) and set according flags

if (ENABLE_ALL)
	set (ENABLE_FILTERS "ON" CACHE BOOL "" FORCE)
	set (ENABLE_OPENCL "ON" CACHE BOOL "" FORCE)
	set (ENABLE_TOOLS "ON" CACHE BOOL "" FORCE)
	set (ENABLE_TEST "ON" CACHE BOOL "" FORCE)
	set (ENABLE_ASTRA "ON" CACHE BOOL "" FORCE)
	set (ENABLE_VR "ON" CACHE BOOL "" FORCE)
	set (ENABLE_AI "ON" CACHE BOOL "" FORCE)
	set (ENABLE_EIGEN "ON" CACHE BOOL "" FORCE)
	set (ENABLE_HDF5 "ON" CACHE BOOL "" FORCE)
endif()

MESSAGE(STATUS "Compilers: C++: ${CMAKE_CXX_COMPILER}, C: ${CMAKE_C_COMPILER}")


if (WIN32 AND NOT MSVC)
	MESSAGE(WARNING "Building under windows with non-VS generator/compiler is currently not tested, expect errors! Please report any findings under https://github.com/3dct/open_iA-superbuild/issues!")
endif()

FIND_PACKAGE(Qt5 COMPONENTS Widgets Xml Network Test OpenGL PrintSupport REQUIRED)

find_package(Git)
if(NOT GIT_FOUND)
	MESSAGE(SEND_ERROR "Git not found, but it is required for some patches!")
endif()


# build types
if (NOT CMAKE_CONFIGURATION_TYPES)
	set (BUILD_TYPE_OPTIONS "Release" "Debug" "RelWithDebInfo" "MinSizeRel")
	list (FIND BUILD_TYPE_OPTIONS "${CMAKE_BUILD_TYPE}" build_type_index)
	if (${build_type_index} EQUAL -1)
		set (BUILD_TYPE_DEFAULT "Release")
		if (DEFINED CMAKE_BUILD_TYPE)
			MESSAGE(WARNING "Invalid CMAKE_BUILD_TYPE, resetting to default value '${BUILD_TYPE_DEFAULT}'!")
		endif()
		set (CMAKE_BUILD_TYPE "${BUILD_TYPE_DEFAULT}" CACHE STRING "Choose the build configuration." FORCE)
		set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ${BUILD_TYPE_OPTIONS})
	endif()
endif()

## VTK

set (VTK_VERSION_OPTIONS "8.1.2" "8.2.0" "9.0.0" "9.0.1")
list (FIND VTK_VERSION_OPTIONS "${VTK_VERSION}" vtk_version_index)
if (${vtk_version_index} EQUAL -1)
	set (VTK_VERSION_DEFAULT "9.0.1")
	if (DEFINED VTK_VERSION)
		MESSAGE(WARNING "Invalid VTK_VERSION, resetting to default ${VTK_VERSION_DEFAULT}!")
	endif()
	set (VTK_VERSION "${VTK_VERSION_DEFAULT}" CACHE STRING "Choose the VTK version to build." FORCE)
	set_property(CACHE VTK_VERSION PROPERTY STRINGS ${VTK_VERSION_OPTIONS})
endif()

set (VTK_RENDER_BACKEND_OPTIONS "OpenGL" "OpenGL2")
list (FIND VTK_RENDER_BACKEND_OPTIONS "${VTK_RENDER_BACKEND}" backend_index)
if (${backend_index} EQUAL -1)
	set (VTK_RENDER_BACKEND_DEFAULT "OpenGL2")
	if (DEFINED VTK_RENDER_BACKEND)
		MESSAGE(WARNING "No valid VTK backend selected (VTK_RENDER_BACKEND), setting back to ${VTK_RENDER_BACKEND_DEFAULT}")
	endif()
	set (VTK_RENDER_BACKEND "${VTK_RENDER_BACKEND_DEFAULT}" CACHE STRING "Choose the render backend for VTK." FORCE)
	set_property(CACHE VTK_RENDER_BACKEND PROPERTY STRINGS ${VTK_RENDER_BACKEND_OPTIONS})
endif()

if ("${VTK_VERSION}" STREQUAL "8.2.0")
	set (VTK_ZIP_SHA512  "FD6582EA20A0B339EC847FEFA18956F9919535C6CBE1C5D443E2B3E302D6F6045C4250B0A89719EC4D4309E25F05449DACF37973615FC59BED33714EC6081BF9")
	set (VTK_GZIP_SHA512 "521BD4DABEDBC24B0E80A314A34ECD7554B04AF28A7973245E3A9CF99A09B995D1B8AC42305C8E53369F226A0A6DA3CDB29105BA2C90B46492736EF717760286")
	if ("${VTK_RENDER_BACKEND}" STREQUAL "OpenGL")
		MESSAGE(SEND_ERROR "OpenGL backend not available in VTK 8.2.0. Please either choose OpenGL2 backend or VTK version 8.1.2!")
	endif()
elseif ("${VTK_VERSION}" STREQUAL "8.1.2")
	set (VTK_ZIP_SHA512  "A6782D29C3E3998A9DAFCE317DD885718E55EC20E368E00C585DE910BA98B1625C6F5F589CAE55CDBC30CE98FEF22C094DA58D4E827485F6E2DBCEE0B96B76DE")
	set (VTK_GZIP_SHA512 "C9FC498804FF9BB433BF79F4B14D9BB6134B026AEA46ED12AC40434BFDD8063C42E75D3E0CFA88D171FA271001C9444D66A471EDC9B22DF83A9109733ABCDFA0")
elseif ("${VTK_VERSION}" STREQUAL "9.0.0")
	unset (VTK_ZIP_SHA512) # no .zip available (yet?) for 9.x
	set (VTK_GZIP_SHA512 "6931BAD7D78689999E57378AB555166D1059D5621234B0E0C781AE110E3A02DEFD03DB2D1B5635101102F969FFC28547F38DA587DAB75494FB273C5F38A996A9")
	if ("${VTK_RENDER_BACKEND}" STREQUAL "OpenGL")
		MESSAGE(SEND_ERROR "OpenGL backend not available in VTK 9.0.0. Please either choose OpenGL2 backend or VTK version 8.1.2!")
	endif()
elseif ("${VTK_VERSION}" STREQUAL "9.0.1")
	unset (VTK_ZIP_SHA512) # no .zip available (yet?) for 9.x
	set (VTK_GZIP_SHA512 "EB2508E2409AD302CC5DB65282A9C1FF4477AC8A93E0FEE898AD8F0974D72DECC7D5D444DC825A3C2F7952EBF59853616097EBE0D134649CAB0D49A9619065BF")
	if ("${VTK_RENDER_BACKEND}" STREQUAL "OpenGL")
		MESSAGE(SEND_ERROR "OpenGL backend not available in VTK 9.0.1. Please either choose OpenGL2 backend or VTK version 8.1.2!")
	endif()
endif()

STRING (SUBSTRING "${VTK_VERSION}" 0 3 VTK_SHORT_VERSION)
set (VTK_REPOSITORY "https://github.com/Kitware/VTK.git")
# set (VTK_REPOSITORY "https://gitlab.kitware.com/vtk/vtk.git")
set (VTK_URL "https://www.vtk.org/files/release/${VTK_SHORT_VERSION}/VTK-${VTK_VERSION}")
if (WIN32 AND VTK_ZIP_SHA512)
	set (VTK_URL "${VTK_URL}.zip")
	set (VTK_ARCHIVE_SHA512 ${VTK_ZIP_SHA512})
else()
	set (VTK_URL "${VTK_URL}.tar.gz")
	set (VTK_ARCHIVE_SHA512 ${VTK_GZIP_SHA512})
endif()

## ITK

set (ITK_VERSION_OPTIONS "4.13.2" "5.0.1" "5.1.0" "5.1.1")
list (FIND ITK_VERSION_OPTIONS "${ITK_VERSION}" itk_version_index)
if (${itk_version_index} EQUAL -1)
	set (ITK_VERSION_DEFAULT  "5.1.1")
	if (DEFINED ITK_VERSION)
		MESSAGE(WARNING "Invalid ITK_VERSION, resetting to default ${ITK_VERSION_DEFAULT}!")
	endif()
	set (ITK_VERSION "${ITK_VERSION_DEFAULT}" CACHE STRING "Choose the ITK version to build." FORCE)
	set_property(CACHE ITK_VERSION PROPERTY STRINGS ${ITK_VERSION_OPTIONS})
endif()
if ("${ITK_VERSION}" STREQUAL "5.1.1")
	set (ITK_ZIP_SHA512  "6763b64e1e6bbfae2b492aed72ab1f4f9d73e96b3e84fce55d8ef0beecaaf0b5401b58891246f11479bb3af38207a75dd04410ccf07f8553b232b179e989d98f")
	set (ITK_GZIP_SHA512 "7b595f52dc2fd19485300412941883abbd19a3c6ef96a90edf89252d9992ca109f2f7de8d9b547ef1fc0cb30d9d4c34ec17c10e8c0d07e90bd0468ffb391a12d")
elseif ("${ITK_VERSION}" STREQUAL "5.1.0")
	set (ITK_ZIP_SHA512  "e59a3f392850f83372694f95625abcaf6554ce31b7fac8037d6a502e8dbabb96ea356e09f73cb0e7ae8514e6ebcc40b7e524b352e36a11f346dda3b70bb07bb1")
	set (ITK_GZIP_SHA512 "413b6ef549b59d8f507038130446ccb704794c6d0980d8ab631d1b1051cb91f399e77c26b69fab6a1e9b9bb4cc233d49996c3ee735cd4de065993d4379b4ed4c")
elseif ("${ITK_VERSION}" STREQUAL "5.0.1")
	set (ITK_ZIP_SHA512  "f1a871742247e9596b39126ee70b9ab5e6e3dc6fabfc54fc2f84d1f174b51f4f9086eae5769f6bc1a28eaf81183ebe77d66ca0199d65e65ef689ab9344bd81f2")
	set (ITK_GZIP_SHA512 "f36613ff72c513ded3d32504f71308a94fe75555cf9fd22b77485d1375601f6e1f1539cc5ac82a9e1e229bcf514a88ccb55122a7dfc74a6ae1b6604aa70bd814")
elseif ("${ITK_VERSION}" STREQUAL "4.13.2")
	set (ITK_ZIP_SHA512  "AB4934953E662FE7F039910FE3DA79C83784026970A0779A8148847401308077B672B5107861FBFBCC8F852249F76BB9A8C1615D28813EE375AC1B3371BC27DB")
	set (ITK_GZIP_SHA512 "053E7109D3BBB0FF9191AF4A3650D58B35BC486D7629E3351D09A67A52379681E9FEC960C8235B56915E2E039503B31439E789A1A2EE306BA7EF67413DAAEA78")
endif()
set (ITK_REPOSITORY "https://github.com/InsightSoftwareConsortium/ITK.git")
# set (ITK_REPOSITORY "https://github.com/Kitware/ITK.git")
# set (ITK_REPOSITORY "http://itk.org/ITK.git")
set (ITK_URL "https://github.com/InsightSoftwareConsortium/ITK/releases/download/v${ITK_VERSION}/InsightToolkit-${ITK_VERSION}")
if (WIN32)
	set (ITK_URL "${ITK_URL}.zip")
	set (ITK_ARCHIVE_SHA512 ${ITK_ZIP_SHA512})
else()
	set (ITK_URL "${ITK_URL}.tar.gz")
	set (ITK_ARCHIVE_SHA512 ${ITK_GZIP_SHA512})
endif()



# TODO:
#   - Download/install Qt?
#   - check behavior when there are changes in git (and tag not the one referenced in ExternalProject_Add) / offline
#   - hdf5

set (OPENVR_VERSION "1.12.5")
set (OPENVR_ARCHIVE_SHA512 "F54B275140D8E91723ECF0A0402B6E9E09B34DE0F2A59C72877CAC1F3AB0CD532D93877782A842D97B4D4AF603FB7DBB111CCC358450E23CA8C644814C82A7AD")
#set (OPENVR_VERSION "1.11.11")
#set (OPENVR_ARCHIVE_SHA512 "5DF70083F3203F58BB87D7D43ADDBB2B9F0C193EC04DF9C659CF7B51DBE6D0F151E990294ECE7962BE1266212770D67EF023D97F3194898977D6C5DE3CF1516B")
#set (OPENVR_VERSION "1.9.15")
#set (OPENVR_ARCHIVE_SHA512 "CB047D92C383F5CF761FD5EE262DDA8755BF592AC827A8C7314294DDBA489E4709EB3AA756207382E1C16BB02DAED77EAA6CEBE48411BCE5A4C2957855FA75D9")
set (OPENVR_URL "https://github.com/ValveSoftware/openvr/archive/v${OPENVR_VERSION}.zip")

set (ASTRA_REPOSITORY "https://github.com/astra-toolbox/astra-toolbox.git")
set (ASTRA_TAG        "06322245a638e435d29bc8f027aed0bd976139d0") # version "1.9.9dev"

# set (BOOST_VERSION  "1.72.0")
# set (BOOST_SHORTVER "1_72")
# set (BOOST_ARCHIVE_SHA512 "BEB4D099E9427394D6AD0CE0D526EE2C6E96CC4CAF5DE4747D009B01CD3E517A988E79C0D4522E49217C6A7EFD551075FB18BFAC51F344CEA9978CDCFC57CC56")
set (BOOST_VERSION  "1.73.0")
set (BOOST_SHORTVER "1_73")
set (BOOST_ARCHIVE_SHA512 "6D80E3E0A9D1B3114B3660A099306A88CE911300EB29F160D6283AAE547AAC9AF84803DB723D9C603DA16061DF409538FFF43A66AC4A58418F2421EF63AA0CE1")
if (MSVC)
	if (MSVC_VERSION LESS 1900)
		MESSAGE(SEND_ERROR "Visual Studio < 2015 is not supported, please use a newer version!")
	elseif (MSVC_VERSION LESS 1910)
		set (MSVC_TOOLSET "v140")
		set (BOOST_MSVC_TOOLSET "msvc-14.0")
		set (BOOST_LIB_SUFFIX "vc140")
	elseif (MSVC_VERSION LESS 1920)
		set (MSVC_TOOLSET "v141")
		set (BOOST_MSVC_TOOLSET "msvc-14.1")
		set (BOOST_LIB_SUFFIX "vc141")
	elseif (MSVC_VERSION LESS 1930)
		set (MSVC_TOOLSET "v142")
		set (BOOST_MSVC_TOOLSET "msvc-14.2")
		set (BOOST_LIB_SUFFIX "vc142")
	else()
		MESSAGE(SEND_ERROR "Visual Studio > 2019 (more precisely, MSVC_VERSION >= 1930) is not supported (yet), please use an older version!")
	endif()
endif()

set (EIGEN_VERSION "3.3.7")
set (EIGEN_URL "https://gitlab.com/libeigen/eigen/-/archive/${EIGEN_VERSION}/eigen-${EIGEN_VERSION}.zip")
set (EIGEN_ARCHIVE_SHA512 "6C19DF0271503DDCE61724729031A3B885D86F35D1F24363A76F9E300234D3257FF56020ACE624B2C011E17CBA6D69A3014508C5E6DC3436BBE331A2129E2175") # for 3.3.7 zip

set (HDF5_VERSION "1.12.0")
STRING (SUBSTRING "${HDF5_VERSION}" 0 4 HDF5_SHORT_VERSION)
set (HDF5_URL "https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-${HDF5_SHORT_VERSION}/hdf5-${HDF5_VERSION}/src/CMake-hdf5-${HDF5_VERSION}")
set (HDF5_ZIP_SHA512   "82C37F19E9907DF3722C44F8423DD9408EB0646A600AD59A727E91D2B1AA9DADFD56EDC5E2A8AA272F9AC84B188B9EE7FD2B0145C5380C511E3B132A638366BA")
set (HDF5_TARGZ_SHA512 "67B415D2125010D587003C76FFDBD8B9B27EA79BF3309C1A916F57F9FE008B83B08067325961307D16ADC03B7D8B90FBFCD6CD30EB2B49619112614AFC8AE6EF")
if (WIN32)
	set (HDF5_URL "${HDF5_URL}.zip")
	set (HDF5_ARCHIVE_SHA512 ${HDF5_ZIP_SHA512})
else()
	set (HDF5_URL "${HDF5_URL}.tar.gz")
	set (HDF5_ARCHIVE_SHA512 ${HDF5_TARGZ_SHA512})
endif()

if (MSVC)
	set (ADDITIONAL_LIB_PATHS "") # for additional lib paths to be added to MSVC debugger environment path
endif()

set (ITK_DEPENDS "")

if (BUILD_VTK)
	set (VTK_CMAKE_ARGS
		"-DBUILD_SHARED_LIBS:BOOL=On"
		"-DVTK_LEGACY_REMOVE:BOOL=On"
		"-DQt5_DIR:PATH=${Qt5_DIR}"
		"-DCMAKE_CXX_COMPILER:FILEPATH=${CMAKE_CXX_COMPILER}"
		"-DCMAKE_C_COMPILER:FILEPATH=${CMAKE_C_COMPILER}"
	)
	if (NOT CMAKE_CONFIGURATION_TYPES)
		LIST (APPEND VTK_CMAKE_ARGS "-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}")
	endif()
	if (VTK_VERSION VERSION_LESS "9.0.0")
		LIST (APPEND VTK_CMAKE_ARGS
			"-DBUILD_TESTING:BOOL=Off"
			"-DModule_vtkGUISupportQt:BOOL=On"
			"-DModule_vtkGUISupportQtOpenGL:BOOL=On"
			"-DModule_vtkRenderingQt:BOOL=On"
			"-DModule_vtkViewsQt:BOOL=On"
			"-DVTK_RENDER_BACKEND:STRING=${VTK_RENDER_BACKEND}")
	else()
		LIST (APPEND VTK_CMAKE_ARGS
			"-DVTK_BUILD_TESTING=OFF"
			"-DVTK_MODULE_ENABLE_VTK_GUISupportQt=YES"
			"-DVTK_MODULE_ENABLE_VTK_GUISupportQtSQL=NO"
			"-DVTK_MODULE_ENABLE_VTK_RenderingQt=YES"
			"-DVTK_MODULE_ENABLE_VTK_RenderingContextOpenGL2=YES"
			"-DVTK_MODULE_ENABLE_VTK_ViewsQt=YES")
	endif()
	set (VTK_DIR "${CMAKE_BINARY_DIR}/vtk/bin-${VTK_VERSION}" CACHE PATH
		"VTK build folder." FORCE)

	set (VTK_DEPENDS "")
	set (VTK_VR_PATCH_COMMAND "")
	if (ENABLE_VR)
		set (OPENVR_ROOT_DIR "${CMAKE_BINARY_DIR}/openvr-${OPENVR_VERSION}")
		set (OPENVR_INCLUDE_DIR "${OPENVR_ROOT_DIR}/headers")
		if (WIN32)
			set (OPENVR_LIB_FILES "${OPENVR_ROOT_DIR}/lib/win64/openvr_api.lib")
		elseif(UNIX)
			set (OPENVR_LIB_FILES "${OPENVR_ROOT_DIR}/lib/linux64/libopenvr_api.so")
		elseif(APPLE)
			set (OPENVR_LIB_FILES "${OPENVR_ROOT_DIR}/lib/osx64/OpenVR.framework")
		else()
			MESSAGE(WARNING "Unknown operating system, probably no VR support!")
		endif()
		set (OPENVR_LIB_AND_INCLUDE
			"-DOpenVR_INCLUDE_DIR:PATH=${OPENVR_INCLUDE_DIR}"
			"-DOpenVR_LIBRARY:FILEPATH=${OPENVR_LIB_FILES}")

		ExternalProject_Add (OpenVR
			URL               ${OPENVR_URL}
			URL_HASH          "SHA512=${OPENVR_ARCHIVE_SHA512}"
			SOURCE_DIR        "${OPENVR_ROOT_DIR}"
			BUILD_IN_SOURCE   1
			CONFIGURE_COMMAND ""
			BUILD_COMMAND     ""
			INSTALL_COMMAND   "")
		set (VTK_DEPENDS OpenVR)
		if (VTK_VERSION VERSION_LESS "9.0.0")
			LIST (APPEND VTK_CMAKE_ARGS
				"-DModule_vtkRenderingOpenVR:BOOL=ON"
				"-DOPENVR_ROOT_DIR:PATH=${OPENVR_ROOT_DIR}")
		else()
			LIST (APPEND VTK_CMAKE_ARGS
				"-DVTK_MODULE_ENABLE_VTK_RenderingOpenVR=YES"
				${OPENVR_LIB_AND_INCLUDE})
			# In VTK 9, some code was changed in Rendering/OpenVR module that produces an error on clang 10, let's patch it:
			set (VTK_VR_PATCH_COMMAND "${GIT_EXECUTABLE}" apply "${CMAKE_SOURCE_DIR}/patches/vtk-9.0.0-openvr.patch")
		endif()
		if (MSVC)
			STRING(REPLACE "/" "\\" OPENVR_WIN_DIR "${OPENVR_ROOT_DIR}")
			set (ADDITIONAL_LIB_PATHS "${ADDITIONAL_LIB_PATHS};${OPENVR_WIN_DIR}\\bin\\win64")
		endif()
	endif()
	# let's apply the fix for parallel coordinate charts potentially causing a crash
	# on mouse move (see https://gitlab.kitware.com/vtk/vtk/-/issues/17441):
	if (VTK_VERSION VERSION_LESS "9.0.0")
		set (VTK_PARALLEL_COORDINATE_PATCH_LINE 510)
		# for vtk < 9, the line endings _should_ adapt by operating system:
		CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/patches/vtk-parallelCoordinates.patch.template" "${CMAKE_BINARY_DIR}/vtk-parallelCoordinates.patch")
	else()
		set (VTK_PARALLEL_COORDINATE_PATCH_LINE 492)
		# for vtk >= 9, only a .tar.gz is available with unix line endings:
		CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/patches/vtk-parallelCoordinates.patch.template" "${CMAKE_BINARY_DIR}/vtk-parallelCoordinates.patch" NEWLINE_STYLE UNIX)
	endif()
	set (VTK_PC_PATCH_COMMAND "${GIT_EXECUTABLE}" apply "${CMAKE_BINARY_DIR}/vtk-parallelCoordinates.patch")
	set (VTK_QT_PATCH_COMMAND "")
	if (Qt5_VERSION VERSION_GREATER "5.14.99" AND VTK_VERSION VERSION_LESS "9.0.1") # when using >= Qt 5.15, VTK up to (and including) 9.0.0 requires a minor patch:
		set (VTK_QT_PATCH_COMMAND "${GIT_EXECUTABLE}" apply "${CMAKE_SOURCE_DIR}/patches/vtk-${VTK_VERSION}-qt-5.15.patch")
	else()
	endif()
	if (VTK_USE_GIT_REPO)
		ExternalProject_Add (VTK
			GIT_REPOSITORY    "${VTK_REPOSITORY}"
			GIT_TAG           "v${VTK_VERSION}"
			PATCH_COMMAND     ${VTK_PC_PATCH_COMMAND}
			      COMMAND     ${VTK_QT_PATCH_COMMAND}
			      COMMAND     ${VTK_VR_PATCH_COMMAND}
			#UPDATE_COMMAND    ""  # to force cmake to stick to the tag specified above, otherwise it will always go to latest 'release' branch commit
			SOURCE_DIR        "${CMAKE_BINARY_DIR}/vtk/src.git"
			BINARY_DIR        "${VTK_DIR}"
			CMAKE_GENERATOR   "${CMAKE_GENERATOR}"
			CMAKE_GENERATOR_PLATFORM "${CMAKE_GENERATOR_PLATFORM}"
			CMAKE_ARGS        "${VTK_CMAKE_ARGS}"
			INSTALL_COMMAND   ""
			DEPENDS           ${VTK_DEPENDS})
	else()
		ExternalProject_Add (VTK
			URL               ${VTK_URL}
			URL_HASH          "SHA512=${VTK_ARCHIVE_SHA512}"
			PATCH_COMMAND     ${VTK_PC_PATCH_COMMAND}
			      COMMAND     ${VTK_QT_PATCH_COMMAND}
			      COMMAND     ${VTK_VR_PATCH_COMMAND}
			SOURCE_DIR        "${CMAKE_BINARY_DIR}/vtk/src-${VTK_VERSION}"
			BINARY_DIR        "${VTK_DIR}"
			CMAKE_GENERATOR   "${CMAKE_GENERATOR}"
			CMAKE_GENERATOR_PLATFORM "${CMAKE_GENERATOR_PLATFORM}"
			CMAKE_ARGS        "${VTK_CMAKE_ARGS}"
			INSTALL_COMMAND   ""
			DEPENDS           ${VTK_DEPENDS})
	endif()
	set (ITK_DEPENDS VTK)
else()
	set (VTK_DIR "${VTK_DIR}" CACHE PATH
		"VTK build folder.")
endif()

if (ENABLE_OPENCL)
	option (BUILD_OPENCL "Build OpenCL ICD loader. If disabled, you need to set OPENCL_DIR to an existing OpenCL ICD loader build" ON)
	if (BUILD_OPENCL)
		set (OPENCL_DIR "${CMAKE_BINARY_DIR}/OpenCL" CACHE PATH
			"OpenCL ICD loader directory" FORCE)
		set (OPENCL_C_HEADERS_REPO "https://github.com/KhronosGroup/OpenCL-Headers.git")
		set (OPENCL_CPP_HEADERS_REPO "https://github.com/KhronosGroup/OpenCL-CLHPP.git")
		set (OPENCL_ICD_REPO "https://github.com/KhronosGroup/OpenCL-ICD-Loader.git")
		set (OPENCL_TAG "v2020.03.13")
		set (OPENCL_CPP_TAG "v2.0.11")
		ExternalProject_Add (OpenCL_C
			GIT_REPOSITORY    ${OPENCL_C_HEADERS_REPO}
			GIT_TAG           "${OPENCL_TAG}"
			SOURCE_DIR        "${OPENCL_DIR}/cheaders"
			BUILD_IN_SOURCE   1
			CONFIGURE_COMMAND ""
			BUILD_COMMAND     ""
			INSTALL_COMMAND   "")
		ExternalProject_Add (OpenCL_CPP
			GIT_REPOSITORY    ${OPENCL_CPP_HEADERS_REPO}
			GIT_TAG           "${OPENCL_CPP_TAG}"
			GIT_SUBMODULES    ""
			SOURCE_DIR        "${OPENCL_DIR}/cppheaders"
			BUILD_IN_SOURCE   1
			CONFIGURE_COMMAND ""
			BUILD_COMMAND     ""
			INSTALL_COMMAND   "")
		# Find way to skip re-build of OpenCL every time!

		set (CMD_COPY_OPENCL_C_HEADERS ${CMAKE_COMMAND} -E copy_directory "${OPENCL_DIR}/cheaders/CL" "${OPENCL_DIR}/icdloader/inc/CL")
		set (CMD_COPY_OPENCL_CPP_HEADERS ${CMAKE_COMMAND} -E copy "${OPENCL_DIR}/cppheaders/include/CL/cl.hpp" "${OPENCL_DIR}/cppheaders/include/CL/cl2.hpp" "${OPENCL_DIR}/icdloader/inc/CL/")
		set (OPENCL_ICD_INSTALL_HEADERS_COMMAND ${CMAKE_COMMAND} -E copy_directory "${OPENCL_DIR}/icdloader/inc/CL" "${OPENCL_DIR}/include/CL")
		# Find way to use different configurations properly...?
		set (OPENCL_ICD_INSTALL_LIBS_COMMAND ${CMAKE_COMMAND} -E copy_directory "${OPENCL_DIR}/icd-bin/$(Configuration)" "${OPENCL_DIR}/lib")
		set (OPENCL_ICD_CMAKE_ARGS
			"-DCMAKE_CXX_COMPILER:FILEPATH=${CMAKE_CXX_COMPILER}"
			"-DCMAKE_C_COMPILER:FILEPATH=${CMAKE_C_COMPILER}"
		)
		if (NOT CMAKE_CONFIGURATION_TYPES)
			LIST(APPEND OPENCL_ICD_CMAKE_ARGS "-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}")
		endif()
		if (WIN32)
			LIST(APPEND OPENCL_ICD_CMAKE_ARGS "-DOPENCL_ICD_LOADER_REQUIRE_WDK:BOOL=OFF")
		endif()
		ExternalProject_Add (OpenCL_ICD
			GIT_REPOSITORY    ${OPENCL_ICD_REPO}
			GIT_TAG           "${OPENCL_TAG}"
			GIT_SUBMODULES    ""
			PATCH_COMMAND     ${CMD_COPY_OPENCL_C_HEADERS}
			      COMMAND     ${CMD_COPY_OPENCL_CPP_HEADERS}
			SOURCE_DIR        "${OPENCL_DIR}/icdloader"
			BINARY_DIR        "${OPENCL_DIR}/icd-bin"
			CMAKE_GENERATOR   "${CMAKE_GENERATOR}"
			CMAKE_GENERATOR_PLATFORM "${CMAKE_GENERATOR_PLATFORM}"
			CMAKE_ARGS        ${OPENCL_ICD_CMAKE_ARGS}
			INSTALL_COMMAND   ${OPENCL_ICD_INSTALL_HEADERS_COMMAND}
			        COMMAND   ${OPENCL_ICD_INSTALL_LIBS_COMMAND}
			DEPENDS           OpenCL_CPP OpenCL_C)

		LIST (APPEND ITK_DEPENDS OpenCL_ICD)
	else()
		set(OPENCL_DIR "${OPENCL_DIR}" CACHE PATH
			"OpenCL ICD loader directory")
	endif()
	set (OPENCL_INCLUDE_DIRS "${OPENCL_DIR}/include")
	set (OPENCL_LIBRARIES "${OPENCL_DIR}/lib/${CMAKE_SHARED_LIBRARY_PREFIX}OpenCL")
	if (WIN32)
		set (OPENCL_LIBRARIES "${OPENCL_LIBRARIES}.lib") # only Windows has the peculiarity of requiring to link against the stub .lib file
	else()
		set (OPENCL_LIBRARIES "${OPENCL_LIBRARIES}${CMAKE_SHARED_LIBRARY_SUFFIX}")
	endif()

	if (NOT OPENCL_DIR)
		MESSAGE(SEND_ERROR "OPENCL_DIR not set! Either enable BUILD_OPENCL or set OPENCL_DIR to a valid OpenCL ICD loader directory!")
	endif()
endif()

set (openiA_DEPENDS "")
if (BUILD_ITK)
	set (ENABLE_ITK_GPU ${ENABLE_OPENCL})
	if (ENABLE_ITK_GPU AND ITK_VERSION STREQUAL "5.1.0")
		set (ENABLE_ITK_GPU OFF)
		MESSAGE(WARNING "Disabling ITK's GPU accelerated filters, as they don't work in ITK 5.1.0. If you want to use these, you need to choose version 5.0.1 or version 4.13.2 of ITK! Technical details: In ITK 5.1.0, enabling ITK_USE_GPU flag results in compilation errors when enabled together with shared libraries, see https://github.com/InsightSoftwareConsortium/ITK/issues/1381.")
	endif()
	set (ITK_CMAKE_ARGS
		"-DBUILD_SHARED_LIBS:BOOL=On"
		"-DBUILD_TESTING:BOOL=Off"
		"-DITK_USE_GPU:BOOL=${ENABLE_ITK_GPU}"
		"-DITK_USE_64BITS_IDS:BOOL=On"
		"-DModule_ITKReview:BOOL=On"
		"-DModule_ITKVtkGlue:BOOL=On"
		"-DModule_HigherOrderAccurateGradient:BOOL=On"
		"-DModule_SplitComponents:BOOL=On"
		"-DVTK_DIR:PATH=${VTK_DIR}"
		"-DQt5_DIR:PATH=${Qt5_DIR}"
		"-DCMAKE_CXX_COMPILER:FILEPATH=${CMAKE_CXX_COMPILER}"
		"-DCMAKE_C_COMPILER:FILEPATH=${CMAKE_C_COMPILER}"
	)
	if (NOT CMAKE_CONFIGURATION_TYPES)
		LIST(APPEND ITK_CMAKE_ARGS "-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}")
	endif()
	if (ENABLE_ITK_GPU)
		LIST (APPEND ITK_CMAKE_ARGS
			"-DOPENCL_ROOT_DIR=${OPENCL_DIR}"
			"-DOPENCL_INCLUDE_DIRS=${OPENCL_INCLUDE_DIRS}"
			"-DOPENCL_LIBRARIES=${OPENCL_LIBRARIES}")
	endif()
	if (ENABLE_VR AND VTK_VERSION VERSION_GREATER_EQUAL "9.0.0")
		LIST (APPEND ITK_CMAKE_ARGS
			${OPENVR_LIB_AND_INCLUDE})
	endif()
	set (ITK_PATCH_COMMAND "")
	if (ITK_VERSION VERSION_LESS "5.1.0")
		set (ITK_PATCH_COMMAND "${GIT_EXECUTABLE}" apply "${CMAKE_SOURCE_DIR}/patches/itk-vtkGlue.patch")
	endif()
	set (ITK_DIR "${CMAKE_BINARY_DIR}/itk/bin-${ITK_VERSION}" CACHE PATH "ITK build folder." FORCE)
	if (ITK_USE_GIT_REPO)
		ExternalProject_Add (ITK
			GIT_REPOSITORY    "${ITK_REPOSITORY}"
			GIT_TAG           "v${ITK_VERSION}"
			PATCH_COMMAND     ${ITK_PATCH_COMMAND}
			SOURCE_DIR        "${CMAKE_BINARY_DIR}/itk/src.git"
			BINARY_DIR        "${ITK_DIR}"
			CMAKE_GENERATOR   "${CMAKE_GENERATOR}"
			CMAKE_GENERATOR_PLATFORM "${CMAKE_GENERATOR_PLATFORM}"
			CMAKE_ARGS        "${ITK_CMAKE_ARGS}"
			INSTALL_COMMAND   ""
			DEPENDS           ${ITK_DEPENDS})
	else()
		ExternalProject_Add (ITK
			URL               "${ITK_URL}"
			URL_HASH          "SHA512=${ITK_ARCHIVE_SHA512}"
			PATCH_COMMAND     ${ITK_PATCH_COMMAND}
			SOURCE_DIR        "${CMAKE_BINARY_DIR}/itk/src-${ITK_VERSION}"
			BINARY_DIR        "${ITK_DIR}"
			CMAKE_GENERATOR   "${CMAKE_GENERATOR}"
			CMAKE_GENERATOR_PLATFORM "${CMAKE_GENERATOR_PLATFORM}"
			CMAKE_ARGS        "${ITK_CMAKE_ARGS}"
			INSTALL_COMMAND   ""
			DEPENDS           ${ITK_DEPENDS})
	endif()
	set (openiA_DEPENDS ITK)
else()
	set (ITK_DIR "${ITK_DIR}" CACHE PATH
		"ITK build folder.")
endif()

if (ENABLE_ASTRA)
	option (BUILD_ASTRA "Build Astra Toolbox in the superbuild. If disabled, you need to set ASTRA_DIR to an existing Astra Toolkit build" ON)
	if (BUILD_ASTRA)
		set (ASTRA_DIR "${CMAKE_BINARY_DIR}/astra" CACHE PATH
			"Astra toolbox directory" FORCE)
		if (WIN32)
			option (ASTRA_PATCH "Whether to patch Astra Toolbox project files. Only required to be set first time sources are fetched, disable later." ON)
		endif()
		FIND_PACKAGE(CUDA)
		if (CUDA_FOUND)
			MESSAGE(STATUS "CUDA: ${CUDA_VERSION} in ${CUDA_TOOLKIT_ROOT_DIR}.")
		else()
			MESSAGE(SEND_ERROR "CUDA, required for ASTRA, not found! Specify CUDA_TOOLKIT_ROOT_DIR, or uncheck ENABLE_ASTRA!")
		endif()

		set (ASTRA_DEPENDS "")
		set (CMD_COPY_BOOST_HEADERS "")
		set (CMD_CREATE_LIBX64_DIR "")
		set (CMD_COPY_BOOST_LIBS "")

		if (BUILD_BOOST)
			# fetch and build boost...
			# inspired by https://github.com/apache/geode-native/blob/develop/dependencies/boost/CMakeLists.txt
			string(REPLACE "." "_" BOOST_VERSION_UNDERSCORE ${BOOST_VERSION})
			set (BOOST_URL "https://dl.bintray.com/boostorg/release/${BOOST_VERSION}/source/boost_${BOOST_VERSION_UNDERSCORE}.zip")
			set (BOOST_BOOTSTRAP_OPTS "")
			if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
				set (BOOST_BOOTSTRAP_OPTS "--with-toolset=clang")
			endif()
			set (B2_FLAGS "-j8 address-model=64 architecture=x86 link=static threading=multi runtime-link=shared --build-type minimal stage")
			if (WIN32)
				set ( BOOST_BOOTSTRAP_COMMAND ${CMAKE_BINARY_DIR}\\boost\\bootstrap.bat )
				set ( B2_COMMAND ${CMAKE_BINARY_DIR}\\boost\\b2 )
				set ( B2_FLAGS ${B2_FLAGS} toolset=${BOOST_MSVC_TOOLSET} )
			else()
				set ( BOOST_BOOTSTRAP_COMMAND ${CMAKE_BINARY_DIR}/boost/bootstrap.sh )
				set ( B2_COMMAND ${CMAKE_BINARY_DIR}/boost/b2 )
				set ( B2_FLAGS ${B2_FLAGS} )
			endif()
			set (BOOST_DIR "${CMAKE_BINARY_DIR}/boost")
			ExternalProject_Add (boost
				URL               ${BOOST_URL}
				URL_HASH          SHA512=${BOOST_ARCHIVE_SHA512}
				BUILD_IN_SOURCE   1
				SOURCE_DIR        "${BOOST_DIR}"
				CONFIGURE_COMMAND ${BOOST_BOOTSTRAP_COMMAND} ${BOOST_BOOTSTRAP_OPTS}
				BUILD_COMMAND     ${B2_COMMAND} ${B2_FLAGS}
				INSTALL_COMMAND   ""  # ${B2_COMMAND} ${B2_FLAGS} install
			)
			# prepare the commands required to copy over boost stuff into astra build tree:
			set (CMD_COPY_BOOST_HEADERS ${CMAKE_COMMAND} -E copy_directory "${BOOST_DIR}/boost" "${ASTRA_DIR}/lib/include/boost")
			set (CMD_CREATE_LIBX64_DIR ${CMAKE_COMMAND} -E make_directory "${ASTRA_DIR}/lib/x64")
			set (BOOST_LIB_BASE "${BOOST_DIR}/stage/lib/libboost_")
			set (BOOST_LIB_LIST "chrono" "date_time" "system" "thread")
			if (WIN32)
				set (BOOST_LIB_LIST1 ${BOOST_LIB_LIST})
				set (BOOST_LIB_LIST2 ${BOOST_LIB_LIST})
				list(TRANSFORM BOOST_LIB_LIST1 PREPEND ${BOOST_LIB_BASE})
				list(TRANSFORM BOOST_LIB_LIST2 PREPEND ${BOOST_LIB_BASE})
				set (BOOST_LIB_SUFF1 "-${BOOST_LIB_SUFFIX}-mt-gd-x64-${BOOST_SHORTVER}.lib")
				set (BOOST_LIB_SUFF2 "-${BOOST_LIB_SUFFIX}-mt-x64-${BOOST_SHORTVER}.lib")
				list(TRANSFORM BOOST_LIB_LIST1 APPEND ${BOOST_LIB_SUFF1})
				list(TRANSFORM BOOST_LIB_LIST2 APPEND ${BOOST_LIB_SUFF2})
				set (BOOST_COPY_LIBS ${BOOST_LIB_LIST1} ${BOOST_LIB_LIST2})
			else()
				set (BOOST_COPY_LIBS ${BOOST_LIB_LIST})
				list(TRANSFORM BOOST_COPY_LIBS PREPEND ${BOOST_LIB_BASE})
				list(TRANSFORM BOOST_COPY_LIBS APPEND ${CMAKE_STATIC_LIBRARY_SUFFIX})
			endif()
			message(STATUS "BOOST Copy libs: ${BOOST_COPY_LIBS}")
			set (CMD_COPY_BOOST_LIBS ${CMAKE_COMMAND} -E copy ${BOOST_COPY_LIBS} "${ASTRA_DIR}/lib/x64")
			set (ASTRA_DEPENDS boost)
		else()
			message(STATUS "Note: Building Astra Toolbox is enabled but building BOOST is disabled")
			message(STATUS "	Make sure to install boost via package manager, e.g. on Ubuntu via `sudo apt install libboost-dev`")
		endif()
		if (WIN32)
			CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/patches/astra-vs.patch.template" "${CMAKE_BINARY_DIR}/astra-vs.patch")
			# find way to only do this once:
			if (ASTRA_PATCH)
				set (ASTRA_PATCH_COMMAND "${GIT_EXECUTABLE}" apply "${CMAKE_BINARY_DIR}/astra-vs.patch")
			else()
				set (ASTRA_PATCH_COMMAND "")
			endif()
			set (ASTRA_CONFIGURE_COMMAND "")
			set (ASTRA_BUILD_COMMAND1 "${CMAKE_MAKE_PROGRAM}" "${ASTRA_DIR}/astra_vc14.sln" -t:astra_vc14 -p:Configuration=Release_CUDA -p:Platform=x64)
			set (ASTRA_BUILD_COMMAND2 "")
		else()
			set (ASTRA_PATCH_COMMAND "")
			set (ASTRA_BUILD_DIR "${ASTRA_DIR}/build/linux")
			set (ASTRA_CONFIGURE_COMMAND1 "${CMAKE_COMMAND}" -E chdir "${ASTRA_BUILD_DIR}" "${ASTRA_BUILD_DIR}/autogen.sh")
			set (ASTRA_CONFIGURE_COMMAND2 "${CMAKE_COMMAND}" -E chdir "${ASTRA_BUILD_DIR}" "${ASTRA_BUILD_DIR}/configure")
			set (ASTRA_BUILD_COMMAND "${CMAKE_COMMAND}" -E chdir "${ASTRA_BUILD_DIR}" "${CMAKE_MAKE_PROGRAM}" -j 8)
		endif()

		if (UNIX)
			message(STATUS "Note: Building Astra Toolbox is enabled, and you're building under *nix.")
			message(STATUS "	Make sure to install autoconf/automake/libtool, e.g. on Ubuntu via `sudo apt install automake libtool`")
		endif()

		# fetch and build astra:
		ExternalProject_Add (astra
			GIT_REPOSITORY    "${ASTRA_REPOSITORY}"
			GIT_TAG           "${ASTRA_TAG}"
			SOURCE_DIR        "${ASTRA_DIR}"
			BUILD_IN_SOURCE   1
			PATCH_COMMAND     ${ASTRA_PATCH_COMMAND}
			      COMMAND     ${CMD_COPY_BOOST_HEADERS}
			      COMMAND     ${CMD_CREATE_LIBX64_DIR}
			      COMMAND     ${CMD_COPY_BOOST_LIBS}
			CONFIGURE_COMMAND ${ASTRA_CONFIGURE_COMMAND1}
			      COMMAND     ${ASTRA_CONFIGURE_COMMAND2}
			BUILD_COMMAND     ${ASTRA_BUILD_COMMAND}
			INSTALL_COMMAND   ""
			DEPENDS           ${ASTRA_DEPENDS}
		)
	else()
		set(ASTRA_DIR "${ASTRA_DIR}" CACHE PATH
			"Astra toolbox directory")
	endif()
endif()


if (ENABLE_HDF5)
	set (HDF5_SRC_DIR "${CMAKE_BINARY_DIR}/hdf5-${HDF5_VERSION}-src")
	set (HDF5_PATCH_COMMAND "${GIT_EXECUTABLE}" apply "${CMAKE_SOURCE_DIR}/patches/hdf5-options.patch")
	if (WIN32)
		if (MSVC_VERSION LESS 1900)
			MESSAGE(SEND_ERROR "Visual Studio < 2015 is not supported, please use a newer version!")
		elseif (MSVC_VERSION LESS 1910)
			set (HDF5_GENERATOR "VS201564")
		elseif (MSVC_VERSION LESS 1920)
			set (HDF5_GENERATOR "VS201764")
		elseif (MSVC_VERSION LESS 1930)
			set (HDF5_GENERATOR "VS201964")
		else()
			MESSAGE(SEND_ERROR "Visual Studio > 2019 (more precisely, MSVC_VERSION >= 1930) is not supported (yet), please use an older version!")
		endif()
		set (HDF5_BUILD_COMMAND "${CMAKE_CTEST_COMMAND}" -S HDF5config.cmake,BUILD_GENERATOR=${HDF5_GENERATOR} -C Release -V -O hdf5.log)
		set (HDF5_PLATFORM_SUFFIX "win64.zip")
	else()
		set (HDF5_BUILD_COMMAND "${HDF5_SRC_DIR}/build-unix.sh")
		set (HDF5_PLATFORM_SUFFIX "Linux.tar.gz")
	# Apple?
	endif()
	set (HDF5_FULL_NAME "HDF5-${HDF5_VERSION}-${HDF5_PLATFORM_SUFFIX}")
	set (HDF5_INSTALL_COMMAND "${CMAKE_COMMAND}" -E chdir "${CMAKE_BINARY_DIR}" "${CMAKE_COMMAND}" -E tar x "${HDF5_SRC_DIR}/${HDF5_FULL_NAME}")
	set (HDF5_INSTALL_DIR "${CMAKE_BINARY_DIR}/${HDF5_FULL_NAME}")
	ExternalProject_Add (hdf5
		URL               ${HDF5_URL}
		URL_HASH          "SHA512=${HDF5_ARCHIVE_SHA512}"
		PATCH_COMMAND     ${HDF5_PATCH_COMMAND}
		SOURCE_DIR        "${HDF5_SRC_DIR}"
		BUILD_IN_SOURCE   1
		CONFIGURE_COMMAND ""
		BUILD_COMMAND     ${HDF5_BUILD_COMMAND}
		INSTALL_COMMAND   "${HDF5_INSTALL_COMMAND}")
endif()

if (ENABLE_AI)
	set (ONNX_VERSION "1.4.0")
	set (ONNX_REQUIRED_CUDA_VERSION "10.1")
	set (ONNX_SRC_DIR "${CMAKE_BINARY_DIR}/onnx-${ONNX_VERSION}")
	set (ONNX_INCLUDE_SUBDIR "include")
	if (WIN32)
		option (AI_ONNX_USE_CUDA "Whether to use CUDA for running ONNX. If disabled, DirectML will be used" ON)
		if (AI_ONNX_USE_CUDA)
			MESSAGE(WARNING "NOTE: ONNX CUDA backend requires CUDA version ${ONNX_REQUIRED_CUDA_VERSION} + cuDNN!")
			set (ONNX_ARCHIVE "https://github.com/microsoft/onnxruntime/releases/download/v${ONNX_VERSION}/onnxruntime-win-x64-gpu-${ONNX_VERSION}.zip")
			set (ONNX_HASH "BF892FCEF02AE2F060C93BF20F6DBE868B5282C907403A4820F5D037AB2AF9973BA406F6F25D1E35BE125BC02ABDDFDCEEF2C58B548469E632B962B4AAB88EF2")
			set (ONNX_LIB_DIR "${ONNX_SRC_DIR}/lib")
		else () # for DirectML:
			set (ONNX_ARCHIVE "https://github.com/microsoft/onnxruntime/releases/download/v${ONNX_VERSION}/Microsoft.ML.OnnxRuntime.DirectML.${ONNX_VERSION}.zip")
			set (ONNX_HASH "DDD6961B9A6F9CC044F10BD45AEF64CFC79E091D45957AFFF68BA372A7C4D7EF2ACEC9E2679C786F72FAEF3986390B0D3F3051060994E3D6439AF828DC53BA7C")
			set (ONNX_INCLUDE_SUBDIR "build/native/include")
			set (ONNX_LIB_DIR "${ONNX_SRC_DIR}/runtimes/win-x64/native")
		endif()
		set (ONNX_LIBRARIES "${ONNX_LIB_DIR}/onnxruntime.lib")
		if (MSVC)
			STRING(REPLACE "/" "\\" ONNX_WIN_LIB_DIR "${ONNX_LIB_DIR}")
			set (ADDITIONAL_LIB_PATHS "${ADDITIONAL_LIB_PATHS};${ONNX_WIN_LIB_DIR}")
		endif()
	elseif (UNIX)
		set (ONNX_ARCHIVE "https://github.com/microsoft/onnxruntime/releases/download/v${ONNX_VERSION}/onnxruntime-linux-x64-gpu-${ONNX_VERSION}.tgz")
		set (ONNX_HASH "e9803f467e2d9dc9cd2c708b2ef58ba0844f039ee54544fc5a127ae9812fae1426dbcc47b0531ca41a75d02f4cda462055e2c9d27086b7af14da3a3643d3c43c")
		set (ONNX_LIBRARIES "${ONNX_SRC_DIR}/lib/libonnxruntime.so.${ONNX_VERSION}")
	elseif(APPLE)
		set (ONNX_ARCHIVE "https://github.com/microsoft/onnxruntime/releases/download/v${ONNX_VERSION}/onnxruntime-osx-x64-${ONNX_VERSION}.tgz")
		set (ONNX_HASH "91EC06DA8EA381ED6FA9089D6570A8DE9C38178323B4FF6AB0BF014A4A314FDECD617DB32864364F81DC5A9665FC66A060E17349FC058686CD451DA35943909D")
		set (ONNX_LIBRARIES "${ONNX_SRC_DIR}/lib/libonnxruntime.${ONNX_VERSION}.dylib")
	else()
		MESSAGE(WARNING "Unknown operating system, probably no AI support!")
	endif()
	CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/patches/onnx-1.4.0-runtime_c_api.h.patch.template" "${CMAKE_BINARY_DIR}/onnx-1.4.0-runtime_c_api.h.patch")
	set (ONNX_PATCH_COMMAND "${GIT_EXECUTABLE}" apply "${CMAKE_BINARY_DIR}/onnx-1.4.0-runtime_c_api.h.patch")
	set (ONNX_INCLUDE_DIR "${ONNX_SRC_DIR}/${ONNX_INCLUDE_SUBDIR}")
	ExternalProject_Add (onnx
		URL               ${ONNX_ARCHIVE}
		URL_HASH          "SHA512=${ONNX_HASH}"
		SOURCE_DIR        "${ONNX_SRC_DIR}"
		PATCH_COMMAND     ${ONNX_PATCH_COMMAND}
		BUILD_IN_SOURCE   1
		CONFIGURE_COMMAND ""
		BUILD_COMMAND     ""
		INSTALL_COMMAND   "")
endif()

set (OPEN_IA_CMAKE_ARGS
	"-DITK_DIR:PATH=${ITK_DIR}"
	"-DCMAKE_CXX_COMPILER:FILEPATH=${CMAKE_CXX_COMPILER}"
	"-DCMAKE_C_COMPILER:FILEPATH=${CMAKE_C_COMPILER}"
)
if (NOT CMAKE_CONFIGURATION_TYPES)
	LIST (APPEND OPEN_IA_CMAKE_ARGS "-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}")
endif()
if (ENABLE_OPENCL)
	LIST (APPEND OPEN_IA_CMAKE_ARGS
	"-DOPENCL_ROOT_DIR=${OPENCL_DIR}"
	"-DOPENCL_INCLUDE_DIRS=${OPENCL_INCLUDE_DIRS}"
	"-DOPENCL_LIBRARIES=${OPENCL_LIBRARIES}")
endif()
if (ENABLE_FILTERS)
	LIST (APPEND OPEN_IA_CMAKE_ARGS
		"-DModule_CommonImageFilters:BOOL=ON"
		"-DModule_ExtractSurface:BOOL=ON"
		"-DModule_FeatureCharacteristics:BOOL=ON"
		"-DModule_MetaFilters:BOOL=ON"
		"-DModule_Metrics:BOOL=ON"
		"-DModule_Segmentation:BOOL=ON")
endif()
if (ENABLE_TOOLS)
	LIST (APPEND OPEN_IA_CMAKE_ARGS
		"-DModule_4DCT:BOOL=ON"
		"-DModule_AdaptiveThreshold:BOOL=ON"
		"-DModule_BoneThickness:BOOL=ON"
		"-DModule_DreamCaster:BOOL=${ENABLE_OPENCL}"
		"-DModule_DynamicVolumeLines:BOOL=ON"
		"-DModule_FeatureScout:BOOL=ON"
		"-DModule_FiAKEr:BOOL=ON"
		"-DModule_FoamCharacterization:BOOL=ON"
		"-DModule_FuzzyFeatureTracking:BOOL=ON"
		"-DModule_GEMSe:BOOL=ON"
		"-DModule_ModalityExplorer:BOOL=ON"
		"-DModule_ParameterExplorer:BOOL=ON"
		"-DModule_PolygonPrimitives:BOOL=ON"
		"-DModule_PorosityAnalyser:BOOL=ON"
		"-DModule_TripleHistogramTF:BOOL=ON"
		"-DModule_Uncertainty:BOOL=ON"
		"-DModule_XRF:BOOL=ON"
		"-DQt5Charts_DIR:PATH=${Qt5_DIR}Charts")
endif()
if (ENABLE_TEST)
	LIST (APPEND OPEN_IA_CMAKE_ARGS "-DopeniA_TESTING_ENABLED:BOOL=ON")
endif()
if (ENABLE_PRECOMPILE)
	LIST (APPEND OPEN_IA_CMAKE_ARGS "-DopeniA_PRECOMPILE:BOOL=ON")
endif()
if (ENABLE_ASTRA)
	LIST (APPEND OPEN_IA_CMAKE_ARGS
		"-DModule_AstraReconstruction:BOOL=ON"
		"-DASTRA_TOOLBOX_DIR:PATH=${ASTRA_DIR}")
	if (BUILD_ASTRA)
		LIST (APPEND openiA_DEPENDS astra)
	endif()
endif()
if (ENABLE_VR)
	LIST (APPEND OPEN_IA_CMAKE_ARGS "-DModule_VR:BOOL=ON")
	if (VTK_VERSION VERSION_LESS "9.0.0")
		LIST (APPEND OPEN_IA_CMAKE_ARGS
			"-DOPENVR_ROOT_DIR:PATH=${OPENVR_ROOT_DIR}")
	else()
		LIST (APPEND OPEN_IA_CMAKE_ARGS
			${OPENVR_LIB_AND_INCLUDE})
	endif()
endif()
if (ENABLE_AI)
	LIST(APPEND OPEN_IA_CMAKE_ARGS
		"-DModule_AI:BOOL=ON"
		"-DONNX_RUNTIME_DIR:PATH=${ONNX_SRC_DIR}"
		"-DONNX_RUNTIME_INCLUDE_DIR:PATH=${ONNX_INCLUDE_DIR}"
		"-DONNX_RUNTIME_LIBRARIES:FILEPATH=${ONNX_LIBRARIES}"
		"-DopeniA_ONNX_CUDA:BOOL=${AI_ONNX_USE_CUDA}")
	LIST (APPEND openiA_DEPENDS onnx)
endif()
if (ENABLE_EIGEN)
	set (EIGEN_BIN_DIR "${CMAKE_BINARY_DIR}/eigen-${EIGEN_VERSION}")
	ExternalProject_Add (eigen
		URL               ${EIGEN_URL}
		URL_HASH          "SHA512=${EIGEN_ARCHIVE_SHA512}"
		SOURCE_DIR        "${EIGEN_BIN_DIR}"
		BUILD_IN_SOURCE   1
        CONFIGURE_COMMAND ""
        BUILD_COMMAND     ""
		INSTALL_COMMAND   "")
	LIST (APPEND openiA_DEPENDS eigen)
	LIST (APPEND OPEN_IA_CMAKE_ARGS
		"-DEIGEN3_INCLUDE_DIR:PATH=${EIGEN_BIN_DIR}")
endif()
if (ENABLE_HDF5)
	LIST (APPEND openiA_DEPENDS hdf5)
	LIST (APPEND OPEN_IA_CMAKE_ARGS
		"-DHDF5_DIR:PATH=${HDF5_INSTALL_DIR}/cmake/hdf5")
endif()

set (OPEN_IA_GIT_TAG_OPTIONS "develop" "master" "2019.12" "2019.07")
list (FIND OPEN_IA_GIT_TAG_OPTIONS "${OPEN_IA_GIT_TAG}" open_ia_tag_index)
if (${open_ia_tag_index} EQUAL -1)
	set (OPEN_IA_GIT_TAG_DEFAULT "develop")
	if (DEFINED OPEN_IA_GIT_TAG)
		MESSAGE(WARNING "Invalid OPEN_IA_GIT_TAG, resetting to default ${OPEN_IA_GIT_TAG_DEFAULT}!")
	endif()
	set (OPEN_IA_GIT_TAG "${OPEN_IA_GIT_TAG_DEFAULT}" CACHE STRING "Choose the open_iA version to build." FORCE)
	set_property(CACHE OPEN_IA_GIT_TAG PROPERTY STRINGS ${OPEN_IA_GIT_TAG_OPTIONS})
endif()
if ("${OPEN_IA_GIT_TAG}" STREQUAL "2019.07" AND "${ITK_VERSION}" STREQUAL "5.0.1")
	MESSAGE(SEND_ERROR "open_iA version ${OPEN_IA_GIT_TAG} is not compatible with ITK version ${ITK_VERSION}!")
endif()
set (OPEN_IA_BIN_DIR "${CMAKE_BINARY_DIR}/open_iA/bin")
ExternalProject_Add (open_iA
	GIT_REPOSITORY    "https://github.com/3dct/open_iA.git"
	GIT_TAG           "${OPEN_IA_GIT_TAG}"
	SOURCE_DIR        "${CMAKE_BINARY_DIR}/open_iA/src"
	BINARY_DIR        "${OPEN_IA_BIN_DIR}"
	CMAKE_GENERATOR   "${CMAKE_GENERATOR}"
	CMAKE_GENERATOR_PLATFORM "${CMAKE_GENERATOR_PLATFORM}"
	CMAKE_ARGS        "${OPEN_IA_CMAKE_ARGS}"
	INSTALL_COMMAND   ""
	DEPENDS           ${openiA_DEPENDS})


if (MSVC)
	string(REPLACE "/" "\\" OPEN_IA_BIN_DIR_WIN "${OPEN_IA_BIN_DIR}")
	STRING(REPLACE "/lib/cmake/Qt5" "/bin" Qt5_LIB_DIR ${Qt5_DIR})
	STRING(REPLACE "/" "\\" Qt5_LIB_DIR ${Qt5_LIB_DIR})
	STRING(REPLACE "/" "\\" VTK_WIN_DIR ${VTK_DIR})
	STRING(REPLACE "/" "\\" ITK_WIN_DIR ${ITK_DIR})
	set (openia_cmd  "${OPEN_IA_BIN_DIR_WIN}\\x64\\$(Configuration)\\open_iA.exe")
	set (openia_path "${Qt5_LIB_DIR};${VTK_WIN_DIR}\\bin\\$(Configuration);${ITK_WIN_DIR}\\bin\\$(Configuration)${ADDITIONAL_LIB_PATHS}")
	set_target_properties(open_iA PROPERTIES VS_DEBUGGER_COMMAND "${openia_cmd}")
	set_target_properties(open_iA PROPERTIES VS_DEBUGGER_ENVIRONMENT "PATH=${openia_path}")
	set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT open_iA)
endif()
