--- a/Modules/ThirdParty/MetaIO/src/MetaIO/src/CMakeLists.txt
+++ b/Modules/ThirdParty/MetaIO/src/MetaIO/src/CMakeLists.txt
@@ -122,16 +122,15 @@
     ${sources}
     ${headers}
   )
+  if (METAIO_FOR_ITK)
+    target_link_libraries(${METAIO_TARGET} PUBLIC
+      itksys
+    )
+  endif (METAIO_FOR_ITK)
 endif ()
 
 include_regular_expression("^.*$")
 
-# Need nsl to resolve gethostbyname on SunOS-5.8
-# and socket also
-if(CMAKE_SYSTEM MATCHES "SunOS.*")
-  target_link_libraries(${METAIO_TARGET} PRIVATE socket nsl)
-endif()
-
 target_link_libraries(${METAIO_TARGET} PUBLIC
   ${METAIO_LIBXML2_LIBRARIES}
   ${METAIO_ZLIB_LIBRARIES}
--- a/Modules/ThirdParty/MetaIO/src/MetaIO/src/localMetaConfiguration.h
+++ b/Modules/ThirdParty/MetaIO/src/MetaIO/src/localMetaConfiguration.h
@@ -21,26 +21,30 @@
 
 #include "metaIOConfig.h"
 
-#if defined(METAIO_FOR_ITK) || !defined(METAIO_FOR_VTK)
+#if defined(METAIO_FOR_ITK)
 // ITK
 
 #  define METAIO_USE_NAMESPACE 0
 #  define METAIO_NAMESPACE ITKMetaIO
+#  define METAIO_STREAM itksys
 
-#  include "itk_zlib.h"
+#  include <itksys/FStream.hxx>
+#  include <itk_zlib.h>
 
 #  include <iostream>
 #  include <fstream>
 
 #  define METAIO_EXPORT
 
-#else
+#elif defined(METAIO_FOR_VTK)
 // VTK
 
 #  define METAIO_USE_NAMESPACE 1
 #  define METAIO_NAMESPACE vtkmetaio
+#  define METAIO_STREAM vtksys
 
-#  include "vtk_zlib.h"
+#  include <vtksys/FStream.hxx>
+#  include <vtk_zlib.h>
 
 #  include <iostream>
 #  include <fstream>
@@ -57,5 +61,18 @@
 #    define METAIO_EXPORT
 #  endif
 
-// end VTK/ITK
+#else
+// Independent of ITK and VTK
+
+#  define METAIO_USE_NAMESPACE 0
+#  define METAIO_NAMESPACE metaio
+#  define METAIO_STREAM std
+
+#  include "itk_zlib.h"
+
+#  include <iostream>
+#  include <fstream>
+
+#  define METAIO_EXPORT
+
 #endif
--- a/Modules/ThirdParty/MetaIO/src/MetaIO/src/metaArray.cxx
+++ b/Modules/ThirdParty/MetaIO/src/MetaIO/src/metaArray.cxx
@@ -552,13 +552,9 @@
   }
 
   // Now check the file content
-  std::ifstream inputStream;
+  METAIO_STREAM::ifstream inputStream;
 
-#ifdef __sgi
-  inputStream.open(_headerName, std::ios::in);
-#else
   inputStream.open(_headerName, std::ios::in | std::ios::binary);
-#endif
 
   if (!inputStream.rdbuf()->is_open())
   {
@@ -581,13 +577,9 @@
     m_FileName = _headerName;
   }
 
-  auto * tmpStream = new std::ifstream;
+  auto * tmpStream = new METAIO_STREAM::ifstream;
 
-#ifdef __sgi
-  tmpStream->open(m_FileName, std::ios::in);
-#else
-  tmpStream->open(m_FileName, std::ios::in | std::ios::binary);
-#endif
+  tmpStream->open(m_FileName.c_str(), std::ios::in | std::ios::binary);
 
   if (!tmpStream->rdbuf()->is_open())
   {
@@ -612,7 +604,7 @@
 
 
 bool
-MetaArray::CanReadStream(std::ifstream * _stream) const
+MetaArray::CanReadStream(METAIO_STREAM::ifstream * _stream) const
 {
   if (!strncmp(MET_ReadForm(*_stream).c_str(), "Array", 5))
   {
@@ -622,7 +614,7 @@
 }
 
 bool
-MetaArray::ReadStream(std::ifstream * _stream, bool _readElements, void * _elementDataBuffer, bool _autoFreeElementData)
+MetaArray::ReadStream(METAIO_STREAM::ifstream * _stream, bool _readElements, void * _elementDataBuffer, bool _autoFreeElementData)
 {
   META_DEBUG_PRINT( "MetaArray: ReadStream" );
 
@@ -671,13 +663,9 @@
       {
         fName = m_ElementDataFileName;
       }
-      auto * readStreamTemp = new std::ifstream;
+      auto * readStreamTemp = new METAIO_STREAM::ifstream;
 
-#ifdef __sgi
-      readStreamTemp->open(fName, std::ios::in);
-#else
-      readStreamTemp->open(fName, std::ios::binary | std::ios::in);
-#endif
+      readStreamTemp->open(fName.c_str(), std::ios::binary | std::ios::in);
       if (!readStreamTemp->rdbuf()->is_open())
       {
         std::cout << "MetaArray: Read: Cannot open data file" << std::endl;
@@ -756,19 +744,9 @@
     }
   }
 
-  auto * tmpWriteStream = new std::ofstream;
+  auto * tmpWriteStream = new METAIO_STREAM::ofstream;
 
-// Some older sgi compilers have a error in the ofstream constructor
-// that requires a file to exist for output
-#ifdef __sgi
-  {
-    std::ofstream tFile(m_FileName, std::ios::out);
-    tFile.close();
-  }
-  tmpWriteStream->open(m_FileName, std::ios::out);
-#else
-  tmpWriteStream->open(m_FileName, std::ios::binary | std::ios::out);
-#endif
+  tmpWriteStream->open(m_FileName.c_str(), std::ios::binary | std::ios::out);
 
   if (!tmpWriteStream->rdbuf()->is_open())
   {
@@ -795,7 +773,7 @@
 }
 
 bool
-MetaArray::WriteStream(std::ofstream * _stream, bool _writeElements, const void * _constElementData)
+MetaArray::WriteStream(METAIO_STREAM::ofstream * _stream, bool _writeElements, const void * _constElementData)
 {
   if (m_WriteStream != nullptr)
   {
@@ -989,7 +967,7 @@
 }
 
 bool
-MetaArray::M_ReadElements(std::ifstream * _fstream, void * _data, int _dataQuantity)
+MetaArray::M_ReadElements(METAIO_STREAM::ifstream * _fstream, void * _data, int _dataQuantity)
 {
   META_DEBUG_PRINT( "MetaArray: M_ReadElements" );
 
@@ -1044,10 +1022,10 @@
 }
 
 bool
-MetaArray::M_WriteElements(std::ofstream * _fstream, const void * _data, std::streamoff _dataQuantity)
+MetaArray::M_WriteElements(METAIO_STREAM::ofstream * _fstream, const void * _data, std::streamoff _dataQuantity)
 {
   bool            localData;
-  std::ofstream * tmpWriteStream;
+  METAIO_STREAM::ofstream * tmpWriteStream;
   if (m_ElementDataFileName == "LOCAL")
   {
     localData = true;
@@ -1056,7 +1034,7 @@
   else
   {
     localData = false;
-    tmpWriteStream = new std::ofstream;
+    tmpWriteStream = new METAIO_STREAM::ofstream;
 
     std::string dataFileName;
     std::string pathName;
@@ -1070,17 +1048,7 @@
       dataFileName = m_ElementDataFileName;
     }
 
-// Some older sgi compilers have a error in the ofstream constructor
-// that requires a file to exist for output
-#ifdef __sgi
-    {
-      std::ofstream tFile(dataFileName, std::ios::out);
-      tFile.close();
-    }
-    tmpWriteStream->open(dataFileName, std::ios::out);
-#else
-    tmpWriteStream->open(dataFileName, std::ios::binary | std::ios::out);
-#endif
+    tmpWriteStream->open(dataFileName.c_str(), std::ios::binary | std::ios::out);
   }
 
   if (!m_BinaryData)
--- a/Modules/ThirdParty/MetaIO/src/MetaIO/src/metaArray.h
+++ b/Modules/ThirdParty/MetaIO/src/MetaIO/src/metaArray.h
@@ -159,10 +159,10 @@
        bool         _autoFreeElementData = false);
 
   virtual bool
-  CanReadStream(std::ifstream * _stream) const;
+  CanReadStream(METAIO_STREAM::ifstream * _stream) const;
 
   virtual bool
-  ReadStream(std::ifstream * _stream,
+  ReadStream(METAIO_STREAM::ifstream * _stream,
              bool            _readElements = true,
              void *          _elementDataBuffer = nullptr,
              bool            _autoFreeElementData = false);
@@ -174,7 +174,7 @@
         const void * _constElementData = nullptr);
 
   virtual bool
-  WriteStream(std::ofstream * _stream, bool _writeElements = true, const void * _constElementData = nullptr);
+  WriteStream(METAIO_STREAM::ofstream * _stream, bool _writeElements = true, const void * _constElementData = nullptr);
 
   // PROTECTED
 protected:
@@ -205,10 +205,10 @@
   M_Read() override;
 
   bool
-  M_ReadElements(std::ifstream * _fstream, void * _data, int _dataQuantity);
+  M_ReadElements(METAIO_STREAM::ifstream * _fstream, void * _data, int _dataQuantity);
 
   bool
-  M_WriteElements(std::ofstream * _fstream, const void * _data, std::streamoff _dataQuantity);
+  M_WriteElements(METAIO_STREAM::ofstream * _fstream, const void * _data, std::streamoff _dataQuantity);
 };
 
 #  if (METAIO_USE_NAMESPACE)
--- a/Modules/ThirdParty/MetaIO/src/MetaIO/src/metaCommand.cxx
+++ b/Modules/ThirdParty/MetaIO/src/MetaIO/src/metaCommand.cxx
@@ -1363,7 +1363,7 @@
   std::string filename = m_Name;
   filename += ".gad.xml";
 
-  std::::ofstream file;
+  METAIO_STREAM::ofstream file;
 #ifdef __sgi
   file.open(filename.c_str(), std::ios::out);
 #else
--- a/Modules/ThirdParty/MetaIO/src/MetaIO/src/metaForm.cxx
+++ b/Modules/ThirdParty/MetaIO/src/MetaIO/src/metaForm.cxx
@@ -543,13 +543,8 @@
 
   std::cout << "Read FileName = _" << m_FileName << "_" << std::endl;
 
-  auto * tmpReadStream = new std::ifstream;
-#ifdef __sgi
-  tmpReadStream->open(m_FileName, std::ios::in);
-#else
-  tmpReadStream->open(m_FileName, std::ios::binary | std::ios::in);
-#endif
-#endif
+  auto * tmpReadStream = new METAIO_STREAM::ifstream;
+  tmpReadStream->open(m_FileName.c_str(), std::ios::binary | std::ios::in);
 
   if (!tmpReadStream->rdbuf()->is_open())
   {
@@ -574,7 +569,7 @@
 }
 
 bool
-MetaForm::CanReadStream(std::ifstream * _stream)
+MetaForm::CanReadStream(METAIO_STREAM::ifstream * _stream)
 {
   if (_stream)
   {
@@ -587,7 +582,7 @@
 }
 
 bool
-MetaForm::ReadStream(std::ifstream * _stream)
+MetaForm::ReadStream(METAIO_STREAM::ifstream * _stream)
 {
   META_DEBUG_PRINT( "MetaForm: ReadStream" );
 
@@ -621,18 +616,9 @@
 
   std::cout << "Write FileName = _" << m_FileName << "_" << std::endl;
 
-  auto * tmpWriteStream = new std::ofstream;
+  auto * tmpWriteStream = new METAIO_STREAM::ofstream;
 
-#ifdef __sgi
-  {
-    // Create the file. This is required on some older sgi's
-    std::ofstream tFile(m_FileName, std::ios::out);
-    tFile.close();
-  }
-  tmpWriteStream->open(m_FileName, std::ios::out);
-#else
-  tmpWriteStream->open(m_FileName, std::ios::binary | std::ios::out);
-#endif
+  tmpWriteStream->open(m_FileName.c_str(), std::ios::binary | std::ios::out);
 
   if (!tmpWriteStream->rdbuf()->is_open())
   {
@@ -651,7 +637,7 @@
 }
 
 bool
-MetaForm::WriteStream(std::ofstream * _stream)
+MetaForm::WriteStream(METAIO_STREAM::ofstream * _stream)
 {
   M_SetupWriteFields();
 
--- a/Modules/ThirdParty/MetaIO/src/MetaIO/src/metaForm.h
+++ b/Modules/ThirdParty/MetaIO/src/MetaIO/src/metaForm.h
@@ -159,23 +159,23 @@
   Read(const char * _fileName = nullptr);
 
   static bool
-  CanReadStream(std::ifstream * _stream) ;
+  CanReadStream(METAIO_STREAM::ifstream * _stream) ;
 
   bool
-  ReadStream(std::ifstream * _stream);
+  ReadStream(METAIO_STREAM::ifstream * _stream);
 
   bool
   Write(const char * _fileName = nullptr);
 
   bool
-  WriteStream(std::ofstream * _stream);
+  WriteStream(METAIO_STREAM::ofstream * _stream);
 
   // PROTECTED
 protected:
   typedef std::vector<MET_FieldRecordType *> FieldsContainerType;
 
-  std::ifstream * m_ReadStream;
-  std::ofstream * m_WriteStream;
+  METAIO_STREAM::ifstream * m_ReadStream;
+  METAIO_STREAM::ofstream * m_WriteStream;
 
   std::string m_FileName;
 
--- a/Modules/ThirdParty/MetaIO/src/MetaIO/src/metaImage.cxx
+++ b/Modules/ThirdParty/MetaIO/src/MetaIO/src/metaImage.cxx
@@ -35,42 +35,21 @@
 {
 
 void
-openReadStream(std::ifstream & inputStream, const std::string & fname)
+openReadStream(METAIO_STREAM::ifstream & inputStream, const std::string & fname)
 {
-#ifdef __sgi
-  inputStream.open(fname, std::ios::in);
-#else
-  inputStream.open(fname, std::ios::in | std::ios::binary);
-#endif
+  inputStream.open(fname.c_str(), std::ios::in | std::ios::binary);
 }
 
 void
-openWriteStream(std::ofstream & outputStream, const std::string & fname, bool append)
+openWriteStream(METAIO_STREAM::ofstream & outputStream, const std::string & fname, bool append)
 {
-// Some older sgi compilers have a error in the ofstream constructor
-// that requires a file to exist for output
-#ifdef __sgi
-  {
-    std::ofstream tFile(fname, std::ios::out);
-    tFile.close();
-  }
-#endif
-
   if (!append)
   {
-#ifdef __sgi
-    outputStream.open(fname, std::ios::out);
-#else
-    outputStream.open(fname, std::ios::binary | std::ios::out);
-#endif
+    outputStream.open(fname.c_str(), std::ios::binary | std::ios::out);
   }
   else
   {
-#ifdef __sgi
-    outputStream.open(fname, std::ios::app | std::ios::out);
-#else
-    outputStream.open(fname, std::ios::binary | std::ios::app | std::ios::out);
-#endif
+    outputStream.open(fname.c_str(), std::ios::binary | std::ios::app | std::ios::out);
   }
 }
 
@@ -1093,7 +1072,7 @@
   }
 
   // Now check the file content
-  std::ifstream inputStream;
+  METAIO_STREAM::ifstream inputStream;
 
   openReadStream(inputStream, fname);
 
@@ -1138,7 +1117,7 @@
 
   M_PrepareNewReadStream();
 
-  auto * tmpReadStream = new std::ifstream;
+  auto * tmpReadStream = new METAIO_STREAM::ifstream;
 
   openReadStream(*tmpReadStream, m_FileName);
 
@@ -1163,7 +1142,7 @@
 }
 
 bool
-MetaImage::CanReadStream(std::ifstream * _stream)
+MetaImage::CanReadStream(METAIO_STREAM::ifstream * _stream)
 {
   if (!strncmp(MET_ReadType(*_stream).c_str(), "Image", 5))
   {
@@ -1174,7 +1153,7 @@
 
 
 bool
-MetaImage::ReadStream(int _nDims, std::ifstream * _stream, bool _readElements, void * _buffer)
+MetaImage::ReadStream(int _nDims, METAIO_STREAM::ifstream * _stream, bool _readElements, void * _buffer)
 {
   if (!MetaObject::ReadStream(_nDims, _stream))
   {
@@ -1231,7 +1210,7 @@
         fileImageDim = m_NDims - 1;
       }
       std::string s;
-      auto *      readStreamTemp = new std::ifstream;
+      auto *      readStreamTemp = new METAIO_STREAM::ifstream;
       int         elementSize;
       MET_SizeOfType(m_ElementType, &elementSize);
       elementSize *= m_ElementNumberOfChannels;
@@ -1292,7 +1271,7 @@
       int         maxV = m_DimSize[m_NDims - 1];
       int         stepV = 1;
       std::string s;
-      auto *      readStreamTemp = new std::ifstream;
+      auto *      readStreamTemp = new METAIO_STREAM::ifstream;
       MET_StringToWordArray(m_ElementDataFileName.c_str(), &nWrds, &wrds);
       if (nWrds >= 2)
       {
@@ -1404,7 +1383,7 @@
         fName = m_ElementDataFileName;
       }
 
-      auto * readStreamTemp = new std::ifstream;
+      auto * readStreamTemp = new METAIO_STREAM::ifstream;
 
       const char * extensions[] = { "", ".gz", ".Z", nullptr };
       for (unsigned ii = 0; extensions[ii] != nullptr; ii++)
@@ -1519,7 +1498,7 @@
     }
   }
 
-  auto * tmpWriteStream = new std::ofstream;
+  auto * tmpWriteStream = new METAIO_STREAM::ofstream;
 
   openWriteStream(*tmpWriteStream, m_FileName, _append);
 
@@ -1549,7 +1528,7 @@
 }
 
 bool
-MetaImage::WriteStream(std::ofstream * _stream, bool _writeElements, const void * _constElementData)
+MetaImage::WriteStream(METAIO_STREAM::ofstream * _stream, bool _writeElements, const void * _constElementData)
 {
   if (m_WriteStream != nullptr)
   {
@@ -1657,8 +1636,8 @@
     }
 
     // Find the start of the data
-    auto * readStream = new std::ifstream;
-    readStream->open(m_FileName, std::ios::binary | std::ios::in);
+    auto * readStream = new METAIO_STREAM::ifstream;
+    readStream->open(m_FileName.c_str(), std::ios::binary | std::ios::in);
 
     // File must be readable
     if (!MetaObject::ReadStream(m_NDims, readStream))
@@ -1713,7 +1692,7 @@
       filename = pathName + filename;
     }
 
-    auto * tmpWriteStream = new std::ofstream;
+    auto * tmpWriteStream = new METAIO_STREAM::ofstream;
     tmpWriteStream->open(filename.c_str(), std::ios::binary | std::ios::in | std::ios::out);
 
     if (!tmpWriteStream->is_open())
@@ -1825,7 +1804,7 @@
       }
     }
 
-    auto * tmpWriteStream = new std::ofstream;
+    auto * tmpWriteStream = new METAIO_STREAM::ofstream;
 
     openWriteStream(*tmpWriteStream, m_FileName, _append);
 
@@ -1909,7 +1888,7 @@
 }
 
 bool
-MetaImage::M_WriteElementsROI(std::ofstream * _fstream,
+MetaImage::M_WriteElementsROI(METAIO_STREAM::ofstream * _fstream,
                               const void *    _data,
                               std::streampos  _dataPos,
                               const int *     _indexMin,
@@ -2327,7 +2306,7 @@
 }
 
 bool
-MetaImage::M_ReadElements(std::ifstream * _fstream, void * _data, std::streamoff _dataQuantity)
+MetaImage::M_ReadElements(METAIO_STREAM::ifstream * _fstream, void * _data, std::streamoff _dataQuantity)
 {
   META_DEBUG_PRINT( "MetaImage: M_ReadElements" );
 
@@ -2406,7 +2385,7 @@
 }
 
 bool
-MetaImage::M_WriteElements(std::ofstream * _fstream, const void * _data, std::streamoff _dataQuantity)
+MetaImage::M_WriteElements(METAIO_STREAM::ofstream * _fstream, const void * _data, std::streamoff _dataQuantity)
 {
 
   if (m_ElementDataFileName == "LOCAL")
@@ -2439,7 +2418,7 @@
       std::streamoff elementNumberOfBytes = elementSize * m_ElementNumberOfChannels;
       std::streamoff sliceNumberOfBytes = m_SubQuantity[m_NDims - 1] * elementNumberOfBytes;
 
-      auto * writeStreamTemp = new std::ofstream;
+      auto * writeStreamTemp = new METAIO_STREAM::ofstream;
       for (i = 1; i <= m_DimSize[m_NDims - 1]; i++)
       {
         fName = string_format(dataFileName, i);
@@ -2488,7 +2467,7 @@
     }
     else // write the image in one unique other file
     {
-      auto * writeStreamTemp = new std::ofstream;
+      auto * writeStreamTemp = new METAIO_STREAM::ofstream;
       openWriteStream(*writeStreamTemp, dataFileName, false);
 
       if (!MetaImage::M_WriteElementData(writeStreamTemp, _data, _dataQuantity))
@@ -2508,7 +2487,7 @@
 
 
 bool
-MetaImage::M_WriteElementData(std::ofstream * _fstream, const void * _data, std::streamoff _dataQuantity)
+MetaImage::M_WriteElementData(METAIO_STREAM::ofstream * _fstream, const void * _data, std::streamoff _dataQuantity)
 {
   if (!m_BinaryData)
   {
@@ -2591,7 +2570,7 @@
 
   M_PrepareNewReadStream();
 
-  auto * tmpReadStream = new std::ifstream;
+  auto * tmpReadStream = new METAIO_STREAM::ifstream;
 
   openReadStream(*tmpReadStream, m_FileName);
 
@@ -2620,7 +2599,7 @@
 MetaImage::ReadROIStream(int *           _indexMin,
                          int *           _indexMax,
                          int             _nDims,
-                         std::ifstream * _stream,
+                         METAIO_STREAM::ifstream * _stream,
                          bool            _readElements,
                          void *          _buffer,
                          unsigned int    subSamplingFactor)
@@ -2676,7 +2655,7 @@
       }
       delete[] wrds;
       char   s[1024];
-      auto * readStreamTemp = new std::ifstream;
+      auto * readStreamTemp = new METAIO_STREAM::ifstream;
       int    elementSize;
       MET_SizeOfType(m_ElementType, &elementSize);
       elementSize *= m_ElementNumberOfChannels;
@@ -2763,7 +2742,7 @@
       int         maxV;
       int         stepV = 1;
       std::string s;
-      auto *      readStreamTemp = new std::ifstream;
+      auto *      readStreamTemp = new METAIO_STREAM::ifstream;
       MET_StringToWordArray(m_ElementDataFileName.c_str(), &nWrds, &wrds);
       if (nWrds >= 2)
       {
@@ -2897,7 +2876,7 @@
         fName = m_ElementDataFileName;
       }
 
-      auto * readStreamTemp = new std::ifstream;
+      auto * readStreamTemp = new METAIO_STREAM::ifstream;
 
       const char * extensions[] = { "", ".gz", ".Z", nullptr };
       for (unsigned ii = 0; extensions[ii] != nullptr; ii++)
@@ -2943,7 +2922,7 @@
 
 /** Read an ROI */
 bool
-MetaImage::M_ReadElementsROI(std::ifstream * _fstream,
+MetaImage::M_ReadElementsROI(METAIO_STREAM::ifstream * _fstream,
                              void *          _data,
                              std::streamoff  _dataQuantity,
                              int *           _indexMin,
@@ -3269,7 +3248,7 @@
 
 
 bool
-MetaImage::M_ReadElementData(std::ifstream * _fstream, void * _data, std::streamoff _dataQuantity)
+MetaImage::M_ReadElementData(METAIO_STREAM::ifstream * _fstream, void * _data, std::streamoff _dataQuantity)
 {
   // NOTE: this method is different from WriteElementData
   std::streamoff gc = 0;
--- a/Modules/ThirdParty/MetaIO/src/MetaIO/src/metaImage.h
+++ b/Modules/ThirdParty/MetaIO/src/MetaIO/src/metaImage.h
@@ -303,16 +303,16 @@
 
 
   static bool
-  CanReadStream(std::ifstream * _stream) ;
+  CanReadStream(METAIO_STREAM::ifstream * _stream) ;
 
   bool
-  ReadStream(int _nDims, std::ifstream * _stream, bool _readElements = true, void * _buffer = nullptr);
+  ReadStream(int _nDims, METAIO_STREAM::ifstream * _stream, bool _readElements = true, void * _buffer = nullptr);
 
   bool
   ReadROIStream(int *           _indexMin,
                 int *           _indexMax,
                 int             _nDims,
-                std::ifstream * _stream,
+                METAIO_STREAM::ifstream * _stream,
                 bool            _readElements = true,
                 void *          _buffer = nullptr,
                 unsigned int    subSamplingFactor = 1);
@@ -340,7 +340,7 @@
            bool         _append = false);
 
   bool
-  WriteStream(std::ofstream * _stream, bool _writeElements = true, const void * _constElementData = nullptr);
+  WriteStream(METAIO_STREAM::ofstream * _stream, bool _writeElements = true, const void * _constElementData = nullptr);
 
 
   bool
@@ -400,13 +400,13 @@
   // _dataQuantity is expressed in number of pixels. Internally it will be
   // scaled by the number of components and number of bytes per component.
   bool
-  M_ReadElements(std::ifstream * _fstream, void * _data, std::streamoff _dataQuantity);
+  M_ReadElements(METAIO_STREAM::ifstream * _fstream, void * _data, std::streamoff _dataQuantity);
 
   // _totalDataQuantity and _dataQuantity are expressed in number of pixels.
   // Internally they will be scaled by the number of components and number of
   // bytes per component.
   bool
-  M_ReadElementsROI(std::ifstream * _fstream,
+  M_ReadElementsROI(METAIO_STREAM::ifstream * _fstream,
                     void *          _data,
                     std::streamoff  _dataQuantity,
                     int *           _indexMin,
@@ -415,20 +415,20 @@
                     std::streamoff  _totalDataQuantity = 0);
 
   bool
-  M_ReadElementData(std::ifstream * _fstream, void * _data, std::streamoff _dataQuantity);
+  M_ReadElementData(METAIO_STREAM::ifstream * _fstream, void * _data, std::streamoff _dataQuantity);
 
   bool
-  M_WriteElements(std::ofstream * _fstream, const void * _data, std::streamoff _dataQuantity);
+  M_WriteElements(METAIO_STREAM::ofstream * _fstream, const void * _data, std::streamoff _dataQuantity);
 
   bool
-  M_WriteElementsROI(std::ofstream * _fstream,
+  M_WriteElementsROI(METAIO_STREAM::ofstream * _fstream,
                      const void *    _data,
                      std::streampos  _dataPos,
                      const int *     _indexMin,
                      const int *     _indexMax);
 
   bool
-  M_WriteElementData(std::ofstream * _fstream, const void * _data, std::streamoff _dataQuantity);
+  M_WriteElementData(METAIO_STREAM::ofstream * _fstream, const void * _data, std::streamoff _dataQuantity);
 
   static bool
   M_FileExists(const char * filename) ;
--- a/Modules/ThirdParty/MetaIO/src/MetaIO/src/metaMesh.h
+++ b/Modules/ThirdParty/MetaIO/src/MetaIO/src/metaMesh.h
@@ -115,7 +115,7 @@
   virtual ~MeshDataBase() = default;
 
   virtual void
-  Write(std::ofstream * stream) = 0;
+  Write(METAIO_STREAM::ofstream * stream) = 0;
   virtual unsigned int
   GetSize() = 0;
   virtual MET_ValueEnumType
@@ -123,8 +123,8 @@
   int m_Id;
 
 protected:
-  std::ifstream * m_ReadStream{};
-  std::ofstream * m_WriteStream{};
+  METAIO_STREAM::ifstream * m_ReadStream{};
+  METAIO_STREAM::ofstream * m_WriteStream{};
 };
 
 /** Mesh point data class for basic types (i.e int, float ... ) */
@@ -142,7 +142,7 @@
   }
 
   void
-  Write(std::ofstream * stream) override
+  Write(METAIO_STREAM::ofstream * stream) override
   {
     // char* id = new char[sizeof(int)];
     // The file is written as LSB by default
--- a/Modules/ThirdParty/MetaIO/src/MetaIO/src/metaObject.cxx
+++ b/Modules/ThirdParty/MetaIO/src/MetaIO/src/metaObject.cxx
@@ -257,13 +257,8 @@
     m_FileName = _fileName;
   }
 
-  auto * tmpReadStream = new std::ifstream;
-
-#ifdef __sgi
-  tmpReadStream->open(m_FileName, std::ios::in);
-#else
-  tmpReadStream->open(m_FileName, std::ios::binary | std::ios::in);
-#endif
+  auto * tmpReadStream = new METAIO_STREAM::ifstream;
+  tmpReadStream->open(m_FileName.c_str(), std::ios::binary | std::ios::in);
 
   if (!tmpReadStream->rdbuf()->is_open())
   {
@@ -287,7 +282,7 @@
 
 
 bool
-MetaObject::ReadStream(int _nDims, std::ifstream * _stream)
+MetaObject::ReadStream(int _nDims, METAIO_STREAM::ifstream * _stream)
 {
   META_DEBUG_PRINT( "MetaObject: ReadStream" );
 
@@ -330,17 +325,10 @@
 
   if (!m_WriteStream)
   {
-    m_WriteStream = new std::ofstream;
+    m_WriteStream = new METAIO_STREAM::ofstream;
   }
 
-#ifdef __sgi
-  // Create the file. This is required on some older sgi's
-  std::ofstream tFile(m_FileName, std::ios::out);
-  tFile.close();
-  m_WriteStream->open(m_FileName, std::ios::out);
-#else
-  m_WriteStream->open(m_FileName, std::ios::binary | std::ios::out);
-#endif
+  m_WriteStream->open(m_FileName.c_str(), std::ios::binary | std::ios::out);
 
   if (!m_WriteStream->rdbuf()->is_open())
   {
@@ -1718,27 +1706,16 @@
 
   if (!m_WriteStream)
   {
-    m_WriteStream = new std::ofstream;
+    m_WriteStream = new METAIO_STREAM::ofstream;
   }
 
-#ifdef __sgi
-  m_WriteStream->open(m_FileName, std::ios::out | std::ios::in);
-  if (!m_WriteStream->rdbuf()->is_open())
-  {
-    delete m_WriteStream;
-    m_WriteStream = 0;
-    return false;
-  }
-  m_WriteStream->seekp(0, std::ios::end);
-#else
-  m_WriteStream->open(m_FileName, std::ios::binary | std::ios::out | std::ios::app);
+  m_WriteStream->open(m_FileName.c_str(), std::ios::binary | std::ios::out | std::ios::app);
   if (!m_WriteStream->rdbuf()->is_open())
   {
     delete m_WriteStream;
     m_WriteStream = nullptr;
     return false;
   }
-#endif
 
   M_Write();
 
@@ -1840,7 +1817,7 @@
   }
   else
   {
-    m_ReadStream = new std::ifstream;
+    m_ReadStream = new METAIO_STREAM::ifstream;
   }
 }
 
--- a/Modules/ThirdParty/MetaIO/src/MetaIO/src/metaObject.h
+++ b/Modules/ThirdParty/MetaIO/src/MetaIO/src/metaObject.h
@@ -35,8 +35,8 @@
 protected:
   typedef std::vector<MET_FieldRecordType *> FieldsContainerType;
 
-  std::ifstream * m_ReadStream;
-  std::ofstream * m_WriteStream;
+  METAIO_STREAM::ifstream * m_ReadStream;
+  METAIO_STREAM::ofstream * m_WriteStream;
 
   FieldsContainerType m_Fields;
   FieldsContainerType m_UserDefinedWriteFields;
@@ -127,7 +127,7 @@
   Read(const char * _fileName = nullptr);
 
   bool
-  ReadStream(int _nDims, std::ifstream * _stream);
+  ReadStream(int _nDims, METAIO_STREAM::ifstream * _stream);
 
   virtual bool
   Write(const char * _fileName = nullptr);
--- a/Modules/ThirdParty/MetaIO/src/MetaIO/src/metaScene.cxx
+++ b/Modules/ThirdParty/MetaIO/src/MetaIO/src/metaScene.cxx
@@ -130,7 +130,7 @@
 
   M_PrepareNewReadStream();
 
-  m_ReadStream->open(m_FileName, std::ios::binary | std::ios::in);
+  m_ReadStream->open(m_FileName.c_str(), std::ios::binary | std::ios::in);
 
   if (!m_ReadStream->rdbuf()->is_open())
   {
@@ -343,19 +343,10 @@
 
   if (!m_WriteStream)
   {
-    m_WriteStream = new std::ofstream;
+    m_WriteStream = new METAIO_STREAM::ofstream;
   }
 
-#ifdef __sgi
-  // Create the file. This is required on some older sgi's
-  {
-    std::ofstream tFile(m_FileName, std::ios::out);
-    tFile.close();
-  }
-  m_WriteStream->open(m_FileName, std::ios::out);
-#else
-  m_WriteStream->open(m_FileName, std::ios::binary | std::ios::out);
-#endif
+  m_WriteStream->open(m_FileName.c_str(), std::ios::binary | std::ios::out);
 
   if (!m_WriteStream->rdbuf()->is_open())
   {
--- a/Modules/ThirdParty/MetaIO/src/MetaIO/src/metaUtils.cxx
+++ b/Modules/ThirdParty/MetaIO/src/MetaIO/src/metaUtils.cxx
@@ -480,7 +480,7 @@
 // Uncompress a stream given an uncompressedSeekPosition
 METAIO_EXPORT
 std::streamoff
-MET_UncompressStream(std::ifstream *            stream,
+MET_UncompressStream(METAIO_STREAM::ifstream *            stream,
                      std::streamoff             uncompressedSeekPosition,
                      unsigned char *            uncompressedData,
                      std::streamoff             uncompressedDataSize,
--- a/Modules/ThirdParty/MetaIO/src/MetaIO/src/metaUtils.h
+++ b/Modules/ThirdParty/MetaIO/src/MetaIO/src/metaUtils.h
@@ -330,7 +330,7 @@
 // Uncompress a stream given an uncompressedSeekPosition
 METAIO_EXPORT
 std::streamoff
-MET_UncompressStream(std::ifstream *            stream,
+MET_UncompressStream(METAIO_STREAM::ifstream *            stream,
                      std::streamoff             uncompressedSeekPosition,
                      unsigned char *            uncompressedData,
                      std::streamoff             uncompressedDataSize,
